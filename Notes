DATABASE: It is a collection of data in a format that can be easily accessed.
    => The S/W used to manage our DB is called DBMS(Database Management System)

Types of DATABASE :-
1. Relational DB - Data stored in Tables :- ex. MYSQL, SQL Server, Oracle, PostgreSQL.
2. Non-Relational DB - Data stored  not in Table :- ex. MONGO DB

=> We can use SQL to work with Relational DB

SQL => Structured Query Language 
    It is a Programming Langauge -> Interaction with Relarional DB.
    USed to perform CURD operations.
    C = Create
    U = Update
    R = Remove
    D = Delete

DB structure: 
        ________________________________
       |______________DB________________|
       |  _________         _________   |
       | |   tb 1  |       |   tb 2  |  |      
       | |   Data  |       |   Data  |  |    
       | |_________|       |_________|  |                                      
       |________________________________|
     
    Table contains interrelated data like college data and Company data.

Tables:- Combination of rows and Columns.
         Columns - Structure / Schema (DESIGN).
         Rows -Show individual Data.

*__Semicolon is the main part of writing the operation__*

=> CREATING OUR FIRST DATABASE:-

    CREATE DATABASE db_name; (For creation of DB).
    DROP DATABASE db_name; (For Delete of DB ).
   
=> Creating our first Table > 

    USE db_name;
    CREATE TABLE table_name(
    column_name1 datatype constraint,
    column_name2 datatype constraint,
    column_name3 datatype constraint,
    )
*__Eg. CREATE TABLE student(id INT PRIMARY KEY, name VARCHAR(50),age INT NOT NULL);__*

=> SQL DataTypes:-
 ______________________________________________________________________________________________________
|*__DATATYPE__* |*__Description__*                                                     |*__Usage__*    |
|---------------|----------------------------------------------------------------------|---------------|
|   CHAR        |   Sting(0-255),Can store character of fixed length                   |   CHAR(50)    |
|   VARCHAR     |   string(0-255), can store characters up to given length             |   VARCHAR(50) |
|   BLOB        |   string(0-65535), can store binary large object                     |   BLOB(1000)  |
|   INT         |   integer(-2,147,483,648 to 2,147,483,647)                           |   INT         |
|   TINYINT     |   integer(-128 to 127)                                               |   TINYINT     |
|   BIGINT      |   integer(-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)   |   BIGINT      |
|   BIT         |   can store x-bit values. x can range from 1 to 64                   |   BIT(2)      |
|   FLOAT       |   Decimal number - with precision to 23 digits                       |   FLOAT       |
|   DOUBLE      |   Decimal number - with 24 to 53 digits                              |   DOUBLE      |
|   BOOLEAN     |   Boolean values 0 or 1                                              |   BOOLEAN     |
|   DATE        |   date in format of YYYY-MM-DD ranging from 1000-01-01 to 9999-12-31 |   DATE        |   
|   YEAR        |   year in 4 digit format ranging from 1901 to 2155                   |   YEAR        |  
|_______________|______________________________________________________________________|_______________|
=> SIGNED AND UNSIGNED DATATYPE:-
    Signed Datatype :- It can represent both positive and negative numbers. For example, a signed integer can represent 0, -25 and 25.
    Unsigned Datatype :- It can only represent non-negative numbers (i.e. zero and positive numbers). For example, an unsigned integer can represent 0 and 25, but not -25.

 ==> By using Unsigned name we increase the limit of values by removing the -ive values to the positive ones e.g. int ( -128 to 127 ) convert in to Unsigned int ( 0 - 255 ).

*__TYPES OF SQL COMMANDS__*

1. DDL (Data Definition Language) :- Create, Alter, Rename, Truncate, Drop.
2. DQL (Data Query Language) :- Select.
3. DML (Data Manipulation Language) :- Insert, Update, Delete.
4. DCL (Data Control Language) :- Grant and Revoke permission to Users.
5. TCL (Transaction Control Language) :- Start Transaction ,Commit, Rollback. 

*_DATABASE RELATED QUERIES_*

    CREATE DATABASE db_name; (Create Database)
    CREATE DATABASE IF NOT EXISTS db_name; (Create Database only if the Database not exists)

    DROP DATABASE db_name; (Delete Database)
    DROP DATABASE IF EXISTS db_name; (Delete Database if exists)

    SHOW DATABASE; 
    SHOW TABLE;

*__TABLE RELATED QUERIES__*

*_CREATE_*
    CREATE TABLE table_name(
        column_name1 datatype constraint,
        column_name2 datatype constraint,
    );

    e.g.
        CREATE TABLE student(
            rollno INT PRIMARY KEY,
            name VARCHAR(50),
        );

*_SELECT AND VIEW ALL COLUMNS_*
    SELECT * FROM table_name; (Here * means all values.)

    e.g.
        SELECT * FROM student;

*_INSERT_*
    INSERT INTO table_name
    (colname1, colname2)
    VALUES
    (col1_v1, col2_v1),
    (col1_v2, col2_v2);

    e.g.
        INSERT INTO student
        (rollno, name)
        VALUES
        (101, 'KARAN'),
        (102, 'ARJUN');


*__KEYS__* 

    => There are 2 important keys.
    1. Primary Key 
    2. Foreign Key
    
    |. Primary Key :- It is a colummn for set of columns in a table that uniquely identifies each row (a unique id).
                      There is only 1 PK and it should be NOT null.
    ||. Foreign Key :- A foreign key is a column (or a set of columns) in a table that refers to the Primary Key in another table.
                       There can be multiple FKs.
                       Fks can have duplicate & null values.

*__CONSTRAINTS__*

    It is use to specify rules for data in a table.

     . NOT NULL :- Column not have a null value => (Col1 int NOT NULL).

     . UNIQUE :- All Values in column are different => (Col2 int UNIQUE).
     
     . PRIMARY KEY :- Makes a column unique & not null but used only once for one => (id int PRIMARY KEY).
        e.g.
          CREATE TABLE temp(
            id INT,name VARCHAR(50),age INT,city VARCHAR(50),PRIMARY KEY(id)
          )  => for single column PRIMARY KEY.

        OR 
          CREATE TABLE temp(
            id INT,name VARCHAR(50),age INT,city VARCHAR(50),PRIMARY KEY(id,name)
          )  => for multiple column PRIMARY KEY.
     
     . FOREIGN KEY :- It is used to link 2 tables together.
                      Prevent action that would destroy links between tables.
        e.g.
          CREATE TABLE temp(
            cust_id INT,name VARCHAR(50),age INT,city VARCHAR(50),PRIMARY KEY(id),
            FOREIGN KEY(cust_id) REFERENCES student(id) => (Here id is the column name of student table)
          )  => for single column FOREIGN KEY.

        OR 
          CREATE TABLE temp(
            id INT,name VARCHAR(50),age INT,city VARCHAR(50),PRIMARY KEY(id),
            FOREIGN KEY(id,name) REFERENCES student(id,name) => (Here id and name is the column name of student table)
          )  => for multiple column FOREIGN KEY. 
     
     . DEFAULT :- It is used to set a default value for a column if no value is specified.
        e.g.
          CREATE TABLE temp(
            id INT,name VARCHAR(50),age INT,city VARCHAR(50),PRIMARY KEY(id),
            age INT DEFAULT 18
          )  => for DEFAULT value.
     
     . CHECK :- It is used to limit the value range that can be placed in a column.
        e.g.
          CREATE TABLE temp(
            id INT PRIMARY KEY ,name VARCHAR(50),age INT,city VARCHAR(50),
            age INT,
            CONSTRAINT age_check CHECK(age>=18 AND city='Mumbai')
          )  => for CHECK value.
           OR 
             CREATE TABLE temp(
                age INT CHECK (age>=18 AND city='Mumbai')
                );  => for CHECK value.
     
**__SELECT IN DETAIL __**
    It is used to fetch data from a database table which returns data in the form of result table.
        Basic Syntax :-
            SELECT column_name1, column_name2 FROM table_name;
        To select all :-
            SELECT * FROM table_name;

**__WHERE CLAUSE__** 
    It is used to define some conditons.
        Syntax :- 
            SELECT column_name1, column_name2 FROM table_name WHERE condition;
            e.g.
                Select * from student where age>18; 
                Select * from student where city='Mumbai';
                Select * from student where age>18 AND city='Mumbai';
                Select * from student where age>18 OR city='Mumbai';
                Select * from student where age>18 OR city='Mumbai' AND name='Karan';
                Select * from student where age>18 OR (city='Mumbai' AND name='Karan'); 
    Operators in WHERE CLAUSE :-
        Arithmetic Operators :- +(addition), -(subtraction), *(multiplication), /(division), %(modulus).
        Comaprision Operators :- =(equal to),!=(not equal to),>,<,>=,<=.
        Logical Operators :- AND, OR, NOT,IN, BETWEEN, LIKE, ALL, ANY, EXISTS etc.
        Bitwise Operators :- &(bitwise AND), |(bitwise OR).

    ==> OPERATOR (DETAIL) :-
     . AND :- If all the conditions are true then only it will return the result.
        Synatx:-
            SELECT * FROM table_name WHERE condition1 AND condition2;
            e.g.
                Select * from student where age>18 AND city='Mumbai';
                Select * from student where age>18 AND city='Mumbai' AND name='Karan';
                Select * from student where age>18 AND (city='Mumbai' AND name='Karan');
     
     . OR :- If any one of the condition is true then it will return the result.   
        Synatx:-
            SELECT * FROM table_name WHERE condition1 OR condition2;
            e.g.
                Select * from student where age>18 OR city='Mumbai';
                Select * from student where age>18 OR city='Mumbai' OR name='Karan';
                Select * from student where age>18 OR (city='Mumbai' OR name='Karan');    
     . BETWEEN :- Selects for a given range.   
        Synatx:-
            SELECT * FROM table_name WHERE column_name BETWEEN value1 AND value2;
            e.g.
                Select * from student where age BETWEEN 18 AND 25;
     . IN :- Matches any Value in the list.
        Synatx:-
            SELECT *FROM table_name WHERE column_name IN (value1,value2,value3);
            e.g.
                Select * from student where age IN (18,20,22);
     . NOT :- It is used to negate the given condition.
        Synatx:-
            SELECT * FROM table_name WHERE column_name NOT IN condition;
            e.g.
                Select * from student where city  NOT IN ("Delhi","Mumbai"); 

**__LIMIT CLAUSE__**

    It is used to set an upper limit on number of (tuples)rows to be returned.
        Syntax :-
            SELECT * FROM table_name LIMIT number;
            e.g.
                Select * from student LIMIT 3;
                Select * from student LIMIT 3,5; (Here 3 is the starting point and 5 is the ending point)
                Select * from student LIMIT 3 OFFSET 5; (Here 3 is the starting point and 5 is the ending point).

**__ORDER BY CLAUSE__**

    It is used to sort the result-set in ascending or descending order.
        Syntax :-
            SELECT * FROM table_name ORDER BY column_name ASC/DESC;
            e.g.
                Select * from student ORDER BY age ASC;
                Select * from student ORDER BY age DESC;
                Select * from student ORDER BY age ASC, name DESC;
                Select * from student ORDER BY age DESC, name ASC;

**__AGGREGATE FUNTIONS__**

    It is used to perform calculations on a set of values and returns a single value.
    Types:-
        1. AVG() :- Returns the average value.  
        2. SUM() :- Returns the sum of all values.
        3. MIN() :- Returns the minimum value.
        4. MAX() :- Returns the maximum value.
        5. COUNT() :- Returns the number of rows.
        6. COUNT(DISTINCT) :- Returns the number of distinct rows.
        Syntax :-
            SELECT function_name(column_name) FROM table_name;
            e.g.
                Select AVG(age) from student;
                Select SUM(age) from student;
                Select MIN(age) from student;
                Select MAX(age) from student;
                Select COUNT(age) from student;
                Select COUNT(*) from student;
                Select COUNT(DISTINCT age) from student;

**__GROUP BY CLAUSE__**

    It is used to group rows that have the same values into summary rows.
    It collects data across multiple records and group the result by one or more columns.
    => Generally we use GROUP BY  with some aggregate functions. 
        Syntax :-
            SELECT column_name1, function_name(column_name2) FROM table_name GROUP BY column_name1;
            e.g.
                Select city,  from student GROUP BY city;
                Select city, COUNT(age) from student GROUP BY city;
                Select city, COUNT(*) from student GROUP BY city;
                Select city, COUNT(DISTINCT age) from student GROUP BY city;
                Select city, name from student GROUP BY city,name;
                 
